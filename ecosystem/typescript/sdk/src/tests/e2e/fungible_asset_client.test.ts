import * as Gen from "../../generated/index";
import { AptosAccount } from "../../account";
import { AptosClient, Provider } from "../../providers";
import { TxnBuilderTypes } from "../../transaction_builder";
import { HexString } from "../../utils";
import { getFaucetClient, longTestTimeout, PROVIDER_LOCAL_NETWORK_CONFIG } from "../unit/test_helper.test";
import { CoinClient, FungibleAssetClient } from "../../plugins";
import { RawTransaction } from "../../aptos_types";

const provider = new Provider(PROVIDER_LOCAL_NETWORK_CONFIG);
const faucetClient = getFaucetClient();
const publisher = new AptosAccount(
  new HexString("0x1c2b344cdc1ca1cc33d5810cf93278fd3c2a8e8ba9cd78240c1193766b06a724").toUint8Array(),
);
const alice = new AptosAccount();
const bob = new AptosAccount();
let assetAddress = "";
/**
 * Since there is no ready-to-use fungible asset contract/module on an aptos framework address
 * we pre compiled ../../../aptos-move/move-examples/fungible_token contract and publish
 * it here to local testnet so we can intercat with it to mint a fungible asset and then
 * test FungibleAssetClient class
 */
describe("fungible asset", () => {
  /**
   * Publish the fungible_token module
   * Mint 5 amount of fungible assets to Alice account
   * Get the asset address and store it to a later use
   */
  beforeAll(async () => {
    await faucetClient.fundAccount(publisher.address(), 100_000_000);
    await faucetClient.fundAccount(alice.address(), 100_000_000);
    await faucetClient.fundAccount(bob.address(), 100_000_000);

    // Publish contract
    const txnHash = await provider.publishPackage(
      publisher,
      new HexString(
        // eslint-disable-next-line max-len
        "0d46756e6769626c65546f6b656e0100000000000000004031424631343733384339463034323242434130303439464333314133394431413046393730453343353342313730454344323641314432344644354237413631b6011f8b08000000000002ff858fbb0ec3200c4577be02b12769a5ae1dba64edd22d8a22024e94260504f42155fdf76240a85b652ff6b5cfb53bc3c5ca67e889e237a047cadabb9a9771838b5e4131f200eb16ad50d9d52118211d97d28273e07ac28dd76e986c587e6abbc6b1d79ee5be47c6a0c72b08ef92766064ca0e49c6f68054090694042516049f10d0fe70df74d3826f385ed74dc862da44b3aad48c7ed27a7ce15cdcff12e23d553e17295f4b33167a1e01000001166d616e616765645f66756e6769626c655f746f6b656ee90e1f8b08000000000002ffed597d6fd43618ffbf9fc22bd22d87a25e9980b14011b0950d69a512ed842634a5bec4b97a4de29bedf45aaa7ef73d7ec98b9de4ae508a90b6fe51e59cc78f9f97dff3e6cc6633f4b244e40217cb9ca08415735ad27281b2aa5cd0392c612188146845e52992ec8c94b0d2bed52b3be84d89e42915359f10614bcbe67f93442278550992c2d6ad199c581089532c15114a38c192b41cab924a010cce70e81d2376b60a9656794b1cebf5282a708917248ddd7574b585e00f0e4678299988338e0bb262fc2c8a1a4aad5e145d1d913c0bd1012de53b020fc71c9722235cff7855f1523f1c58b943f4daee7fa9b65f3f1d3fc818a039e050ff5cb761c96981f965ab8b908c93768390691411ce19f7d6045d94a4b7283978138eaf64f6244447fae7b547c49692b2d29749db3036f28b28b2a6be32fe8a4b10383534a1f5a1dd210849af37304b589ec3139c0acf6673462f8061fbe2e99666a1e07258e6971e205b08b115688d125ca2029f01824f71b9200015b53961a59068ffede1717cf8feedfebb08558f1fa23df4c03237ef5f1e1ded1fc7477f1ebc3afc3d42e7703ce3cfaa27cf8170be7dbc7f74bc6dc9ef7de044b08a27245e70562de3821473c203fd03a8479d6fbcfeab229bfed5a8f51bcb53c449267418b052729643181154000ac14d219216850897299a030a5564b2cc0f4ea32cb8ba82503b30b1e000149d42cc9e914b1b11ea4f9d11c3e15183f9e6557daa79dd8d848644c9625ed7b1a15f5db73e7b03614c714e3f928eab4c3250ca68506b6595018c02a01582e4236313e5014e41c8084d0cb0a71de17350a9458ac66264b10d6e50500fe6db92882e155254dbd3a70e1303cb35fb4d22f1b78e40366808d49f163f749646244b894838d541b83d75773c707f7a4abb2f4d184751c94a124c074f3e957219cd661aa8399e8b1d48f8b39669f774cf523a5414c098c6059869d2cf04c180ce6b45ee9b7a8d2d5a677d19bd353f4fe5e679380d37d9aa7ead5763526220e9d41f1d97816707c7809fac82b69197040d2e4334bbaf1fd1fd597f6737bb19527159cc21d378c43fe877294940b15c0cb21ab16386cf2968b703ffb6a783c6847cf0b329f32aedcc54f69835b9adce8038cfd9ca8416e36ac154759d245cbd771c64d6990c20e957f50581c4a1dc55d3049e173c90d7696d1dab9a6603ab6e125dc7ae4bb781659d476d198d4d5e04e6759969989a376bd815ec5c956b17a193e1035c340e9697abc609a1a378d85af4ba0546b754dcfb704ec9aaad89ef88841ddae7384da1dc0a55ef74513407fb21204fb1fc5ed88c9ca2d529b1ada86d15e12925cb9c5d92d4c06659cd739ae862b320506baccec134b2cdd9b3bacb7bfe0d551cb5552b1cd76669dd6e5392759a7defb9f685db1a7b29da6fdf82899fb5d1a4157c3a54236a61ecf1c0cc0ad49a33701498fa1d83ea43d46ca19c6d9a3af0bcd73b382e24d031e9be50a3cf6b1760822858554addf2012a5954036a8a70f24f45e17104cc7da383b15dac7881e98f1ff5265cc953c6a1074ae33983967da54241d82a6958f7e011af2011eadd63250826a18af74ad005155204920df3cdf04012d2669b0c4bbfd346b4316487a1cf07028c09e8dbd48ca8f3d8184f373734bac2a0872dfb0e1e8e9be6773d2610f89be9403ad125248633552e6852eb09ca28c9d311ecd4543dfc649c150d681c0439d8faf270f24ac7e42628724cebb91ef4b81da81487af07571f5d8d660dbc5c1875f47330e5c0b6832b35b1f4ae373e2fefa8eab60937770a954ec3723398d41bbe0e447c57ead3156950cbe1b96fcc67af39213049c2908f93449120c110956aec2f591b3188a9763221f49c0ccfc83d0f669a716cb9f66b8859bfc3daf18583fd564eb4da6ef6a32ae3e0b78fd01064395e7801d9c422af48df957f94d9b8336fe1c9aafcdf9777e7cb0c66c20167be87949c72bcba931aadbcbab207acefee9c940b8dbcebc8ff687df61d5d9bf24675d42662dfdfbf984eefcedc6d3bc99eb79de62bc39e87bff948fe1a6d52af09ffa466fb95d64a3b95164525d57d96ba99219c9409a967707d5503cf27b5dd4e76da765d0ddde770e30beb44e8b95cefb1b714d420c6030a4cee1a43860d2d735aea7c3f3639b5e3a6dad502a45937c6e84df2860032c364102037858fe2cee577413dec52116b41cc641b5a5ddb219865817e3f858b37fdc9063eef105e5021d4609d9292c2acdd7e9e9876dc6bb55ee46c8ef36743723d6fc4f026ff89818a77cfa22e1782fa766d0f791702f6b3841e8880309e63411328086c15b8b7deccb7facd83af7bb76f79f997cc66b573c73160d1e1ad18733069bbf1c5ee458613d2b984d4d3aedd1ca207bbbba17fded07dcb9a4451a3612ca2c171188227f04ea94319eded19291e76a3daed611a71c725dd240515b6bc8fc911a2471d76cd383c7674e89a5a59f2336ce2f1e85a24448fbb77c7bdbeee136cf2dd2d8cf2633718d59c376e909f76dd84ba29d8ac095b94dae8bbf7815c2c2192d5c509a639948300431e90f089292540bd7bf1687777f741887296607dc3b887d467653f78fb3966430c6b9b29919af56f25b4cdcd9e126d6dc85e6f5d6ffd0b207ad810cb20000000000400000000000000000000000000000000000000000000000000000000000000010e4170746f734672616d65776f726b00000000000000000000000000000000000000000000000000000000000000010b4170746f735374646c696200000000000000000000000000000000000000000000000000000000000000010a4d6f76655374646c69620000000000000000000000000000000000000000000000000000000000000004114170746f73546f6b656e4f626a6563747300",
      ).toUint8Array(),
      [
        new TxnBuilderTypes.Module(
          new HexString(
            // eslint-disable-next-line max-len
            "a11ceb0b060000000c010016021634034aaa0104f40116058a028a03079405fb05088f0b6006ef0b990210880ea1010aa90f0c0cb50feb040da014060000010101020103010401050106010702080209020a000b0800020d00000310070100010211080002190600021b0600021d0600021e080007270700032c0200092d0b00042e07010000000c000100000e020100000f030100001201040000130501000014060100001507010000160301000017060800061f050a0003200c0d010801210e0e0003220f0a01080523101101080224130101080225150101080226170101080728191a000a291b1900032a1c0a00032b0a1d0108042f0120010008302122000a3123220005322501000233262700023426280002352629000336262a0002142c080002372e0101080238300801080a0b0c0b0d0b0e120f121012140b151f15241e121f1203060c05030003060c05080102060c05010b0201080301060c03060c030504060c050503010801050b020108030b020108030608060b02010807060c0105010803020b02010900050101010301060b0201090002050b02010900010b02010807010807030608060b0201090003050b020108030b02010803060c0b02010807060805030608050b020109000801050b020108030b02010803060c0608050b02010807030608050b0201090001030508080808010a02010808020608080608080206050a02010b02010900080809080608080608090c08040808080501080a010b0b01090006060c08080308080b0b01080a080801080906060c0808080808080b0b01080a08080104060608090b0b01040808080802080801060809010804010806010805010c060b020108030b020108030801060800060c0b020108070206080403060b020108030b020108030b02010807060c0b02010807060805040608050b020109000b0201090003050b020108030b020108030b02010807060c060805030608050b0201090003166d616e616765645f66756e6769626c655f746f6b656e056572726f720e66756e6769626c655f6173736574066f626a656374066f7074696f6e167072696d6172795f66756e6769626c655f73746f7265067369676e657206737472696e670a636f6c6c656374696f6e07726f79616c747905746f6b656e144d616e6167656446756e6769626c654173736574046275726e0d46756e6769626c654173736574076465706f7369740e667265657a655f6163636f756e74064f626a656374084d657461646174610c6765745f6d657461646174610b696e69745f6d6f64756c65046d696e74087472616e7366657210756e667265657a655f6163636f756e74087769746864726177086d696e745f726566074d696e745265660c7472616e736665725f7265660b5472616e73666572526566086275726e5f726566074275726e5265660d46756e6769626c6553746f72650a616464726573735f6f660869735f6f776e6572117065726d697373696f6e5f64656e6965640e6f626a6563745f616464726573731b656e737572655f7072696d6172795f73746f72655f657869737473096275726e5f66726f6d106465706f7369745f776974685f7265660f7365745f66726f7a656e5f666c616706537472696e670475746638116372656174655f746f6b656e5f73656564156372656174655f6f626a6563745f6164647265737311616464726573735f746f5f6f626a6563740e436f6e7374727563746f7252656607526f79616c7479064f7074696f6e046e6f6e65176372656174655f66697865645f636f6c6c656374696f6e126372656174655f6e616d65645f746f6b656e2b6372656174655f7072696d6172795f73746f72655f656e61626c65645f66756e6769626c655f61737365741167656e65726174655f6d696e745f7265661167656e65726174655f6275726e5f7265661567656e65726174655f7472616e736665725f7265660f67656e65726174655f7369676e6572117472616e736665725f776974685f7265661177697468647261775f776974685f726566d6921a4cfe909980a4012c004e13e5ae6a9e535dbe177b52f24f7fc64b36cb52000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040a02050454455354030801000000000000000a0215147465737420636f6c6c656374696f6e206e616d650a02100f7465737420746f6b656e206e616d650520d6921a4cfe909980a4012c004e13e5ae6a9e535dbe177b52f24f7fc64b36cb520a021c1b7465737420636f6c6c656374696f6e206465736372697074696f6e0a02201f687474703a2f2f6170746f736c6162732e636f6d2f636f6c6c656374696f6e0a0217167465737420746f6b656e206465736372697074696f6e0a021b1a687474703a2f2f6170746f736c6162732e636f6d2f746f6b656e0a021918746573742066756e6769626c65206173736574206e616d650a022120687474703a2f2f6170746f736c6162732e636f6d2f66617669636f6e2e69636f126170746f733a3a6d657461646174615f76318c010101000000000000000a454e4f545f4f574e4552344f6e6c792066756e6769626c65206173736574206d65746164617461206f776e65722063616e206d616b65206368616e6765732e01144d616e6167656446756e6769626c654173736574010301183078313a3a6f626a6563743a3a4f626a65637447726f7570010c6765745f6d657461646174610101000002031808041a08051c08060001040100091d11030c030b000a030c040c070a040b0711093800040c050f0701110b270e0438012b0010000c050b010b0338020c060b050b060b023803020101000100141d11030c030b000a030c040c050a040b0511093800040c050f0701110b270e0438012b0010010c070b010b0338020c060b070b060b023804020201040100161d11030c020b000a020c030c040a030b0411093800040c050f0701110b270e0338012b0010010c050b010b0238020c060b050b060838050203010000180f070211110c01070311110c0207040c000e000e010e0211121113380602040000001e39070211110c03070311110c070a00070511110601000000000000000a033807070611111116010b000b03070711110b0738070708111111170c010e010c040a04380807091111070011113102070a111111180a0411190c060a04111a0c020a04111b0c080b04111c0c050e050b060b080b0212002d000205010401002b2211030c030b000a030c040c070a040b0711093800040c050f0701110b270e0438012b000c060b020b0338020c080a0610020b01111d0c050b0610010b080b0538040206010401002d2211030c040b000a040c050c070a050b0711093800040c050f0701110b270e0538012b0010010c090b010a0438020c060b020b0438020c080b090b060b080b033809020701040100161d11030c020b000a020c030c040a030b0411093800040c050f0701110b270e0338012b0010010c050b010b0238020c060b050b060938050208010001002f1d11030c030b000a030c040c060a040b0611093800040c050f0701110b270e0438012b0010010c070b020b0338020c050b070b050b01380a0200020001000000",
          ).toUint8Array(),
        ),
      ],
    );
    await provider.waitForTransaction(txnHash);

    // Mint fungible asset to Alice
    const payload: Gen.EntryFunctionPayload = {
      function: `${publisher.address().hex()}::managed_fungible_token::mint`,
      type_arguments: [],
      arguments: [5, alice.address().hex()],
    };
    const rawTxn = await provider.generateTransaction(publisher.address(), payload);
    const bcsTxn = AptosClient.generateBCSTransaction(publisher, rawTxn);
    const transactionRes = await provider.submitSignedBCSTransaction(bcsTxn);
    await provider.waitForTransaction(transactionRes.hash);

    // Get the asset address
    const viewPayload: Gen.ViewRequest = {
      function: `${publisher.address().hex()}::managed_fungible_token::get_metadata`,
      type_arguments: [],
      arguments: [],
    };
    const metadata = await provider.view(viewPayload);
    assetAddress = (metadata as any)[0].inner;
  }, longTestTimeout);

  /**
   * Test `transferAmount` and `balance` functions in FungibleAssetClient class
   */
  test(
    "it trasfers amount of fungible asset and gets the correct balance",
    async () => {
      const fungibleAsset = new FungibleAssetClient(provider);

      // Alice has 5 amounts of the fungible asset
      const aliceInitialBalance = await fungibleAsset.balance(alice.address(), assetAddress);
      expect(aliceInitialBalance).toEqual(BigInt(5));

      // Alice transfers 2 amounts of the fungible asset to Bob
      const transactionHash = await fungibleAsset.transferAmount(alice, assetAddress, bob.address(), 2);
      await provider.waitForTransaction(transactionHash);

      // Alice has 3 amounts of the fungible asset
      const aliceCurrentBalance = await fungibleAsset.balance(alice.address(), assetAddress);
      expect(aliceCurrentBalance).toEqual(BigInt(3));

      // Bob has 2 amounts of the fungible asset
      const bobBalance = await fungibleAsset.balance(bob.address(), assetAddress);
      expect(bobBalance).toEqual(BigInt(2));
    },
    longTestTimeout,
  );

  /**
   * Test `transfer` and `checkBalance` functions in CoinClient class
   */
  test("coin client supports fungible assets operations", async () => {
    const coinClient = new CoinClient(provider.aptosClient);
    // Test `transfer` and `checkBalance`

    // Alice transfers 2 more amount of fungible asset to Bob
    await provider.waitForTransaction(
      await coinClient.transfer(alice, bob, 2, {
        assetAddress,
      }),
      { checkSuccess: true },
    );
    // Bob balance is now 4
    expect(
      await coinClient.checkBalance(bob, {
        assetAddress,
      }),
    ).toEqual(BigInt(4));
  });

  test("it generates and returns a transferAmount raw transaction", async () => {
    const fungibleAsset = new FungibleAssetClient(provider);
    const rawTxn = await fungibleAsset.generateTransferAmount(alice, assetAddress, bob.address(), 2);
    expect(rawTxn instanceof RawTransaction).toBeTruthy();
    expect(rawTxn.sender.toHexString()).toEqual(alice.address().hex());
  });
});
